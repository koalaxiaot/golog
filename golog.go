package golog

import (
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"sync"
	"time"
)

type Level int

const (
	DEBUG Level = iota + 1
	INFO
	WARN
	ERROR
)

var levels = [...]string{
	"DEBUG",
	"INFO ",
	"WARN ",
	"ERROR",
}

func (l Level) String() string {
	return levels[l-1]
}

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

// A Logger represents an active logging object that generates lines of
// output to an io.Writer.  Each logging operation makes a single call to
// the Writer's Write method.  A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	mu     sync.Mutex // ensures atomic writes; protects the following fields
	prefix string     // prefix to write at beginning of each line
	flag   int        // properties
	out    io.Writer  // destination for output
	buf    []byte     // for accumulating text to write

	level      Level
	filepath   string // "./logs/golog.log"
	file       *os.File
	rotateSize int64 // 20 MB(default)
	maxFileNum int   // 10 default
}

func New() *Logger {

	if err := os.MkdirAll("./logs/", 0744); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	filepath := "./logs/golog.log"
	file, err := os.OpenFile(filepath, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0664)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	return &Logger{
		out:        file,
		prefix:     fmt.Sprintf("%v ", Level(1)),
		flag:       log.Ldate | log.Ltime | log.Lshortfile,
		level:      1,
		filepath:   filepath,
		file:       file,
		rotateSize: 20 * 1024 * 1024,
		maxFileNum: 10,
	}

}

// SetOutput sets the output destination for the logger.
func (l *Logger) SetOutput(w io.Writer) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.out = w
}

var std = New()

// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

func (l *Logger) formatHeader(buf *[]byte, t time.Time, file string, line int) {
	*buf = append(*buf, l.prefix...)
	if l.flag&LUTC != 0 {
		t = t.UTC()
	}
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
}

// Output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Logger.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) Output(calldepth int, s string) error {
	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.flag&(Lshortfile|Llongfile) != 0 {
		// release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	l.buf = l.buf[:0]
	l.formatHeader(&l.buf, now, file, line)
	l.buf = append(l.buf, s...)
	if len(s) == 0 || s[len(s)-1] != '\n' {
		l.buf = append(l.buf, '\n')
	}

	if l.checkIfRotate() {
		if err := l.Rotate(); err != nil {
			fmt.Println(err)
			return err
		}
	}

	_, err := l.out.Write(l.buf)
	return err
}

// Printf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Printf(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...))
}

// Print calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Print.
func (l *Logger) Print(v ...interface{}) { l.Output(2, fmt.Sprint(v...)) }

// Println calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Println.
func (l *Logger) Println(v ...interface{}) { l.Output(2, fmt.Sprintln(v...)) }

// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).
func (l *Logger) Fatal(v ...interface{}) {
	l.Output(2, fmt.Sprint(v...))
	os.Exit(1)
}

// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).
func (l *Logger) Fatalf(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...))
	os.Exit(1)
}

// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).
func (l *Logger) Fatalln(v ...interface{}) {
	l.Output(2, fmt.Sprintln(v...))
	os.Exit(1)
}

// Panic is equivalent to l.Print() followed by a call to panic().
func (l *Logger) Panic(v ...interface{}) {
	s := fmt.Sprint(v...)
	l.Output(2, s)
	panic(s)
}

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (l *Logger) Panicf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.Output(2, s)
	panic(s)
}

// Panicln is equivalent to l.Println() followed by a call to panic().
func (l *Logger) Panicln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	l.Output(2, s)
	panic(s)
}

// Flags returns the output flags for the logger.
func (l *Logger) Flags() int {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.flag
}

// SetFlags sets the output flags for the logger.
func (l *Logger) SetFlags(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = flag
}

// Prefix returns the output prefix for the logger.
func (l *Logger) Prefix() string {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.prefix
}

// SetPrefix sets the output prefix for the logger.
func (l *Logger) SetPrefix(prefix string) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.prefix = prefix
}

// SetOutput sets the output destination for the standard logger.
func SetOutput(w io.Writer) {
	std.mu.Lock()
	defer std.mu.Unlock()
	std.out = w
}

// Flags returns the output flags for the standard logger.
func Flags() int {
	return std.Flags()
}

// SetFlags sets the output flags for the standard logger.
func SetFlags(flag int) {
	std.SetFlags(flag)
}

// Prefix returns the output prefix for the standard logger.
func Prefix() string {
	return std.Prefix()
}

// SetPrefix sets the output prefix for the standard logger.
func SetPrefix(prefix string) {
	std.SetPrefix(prefix)
}

// These functions write to the standard logger.

// Print calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Print.
func Print(v ...interface{}) {
	err := std.Output(2, fmt.Sprint(v...))
	fmt.Println(err)
}

// Printf calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Printf.
func Printf(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...))
}

// Println calls Output to print to the standard logger.
// Arguments are handled in the manner of fmt.Println.
func Println(v ...interface{}) {
	std.Output(2, fmt.Sprintln(v...))
}

// Fatal is equivalent to Print() followed by a call to os.Exit(1).
func Fatal(v ...interface{}) {
	std.Output(2, fmt.Sprint(v...))
	os.Exit(1)
}

// Fatalf is equivalent to Printf() followed by a call to os.Exit(1).
func Fatalf(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...))
	os.Exit(1)
}

// Fatalln is equivalent to Println() followed by a call to os.Exit(1).
func Fatalln(v ...interface{}) {
	std.Output(2, fmt.Sprintln(v...))
	os.Exit(1)
}

// Panic is equivalent to Print() followed by a call to panic().
func Panic(v ...interface{}) {
	s := fmt.Sprint(v...)
	std.Output(2, s)
	panic(s)
}

// Panicf is equivalent to Printf() followed by a call to panic().
func Panicf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	std.Output(2, s)
	panic(s)
}

// Panicln is equivalent to Println() followed by a call to panic().
func Panicln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	std.Output(2, s)
	panic(s)
}

// Output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Logger.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is the count of the number of
// frames to skip when computing the file name and line number
// if Llongfile or Lshortfile is set; a value of 1 will print the details
// for the caller of Output.
func Output(calldepth int, s string) error {
	return std.Output(calldepth+1, s) // +1 for this frame.
}

/*****************************************************************/
/* Extern */
/*****************************************************************/

// file path
func (l *Logger) Setpath(path string) *Logger {

	l.mu.Lock()
	defer l.mu.Unlock()
	l.file.Close()

	if err := os.MkdirAll(path, 0744); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	filepath := fmt.Sprintf("%s/golog.log", strings.TrimRight(path, "/"))
	file, err := os.OpenFile(filepath, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0664)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	l.out = file
	l.file = file
	l.filepath = filepath
	return l
}
func (l *Logger) Getpath() string {
	return l.filepath
}

// level
func (l *Logger) Setlevel(level Level) *Logger {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.level = level
	l.prefix = fmt.Sprintf("%v ", level)
	return l
}
func (l *Logger) Getlevel() Level {
	return l.level
}

// rotate
func (l *Logger) Rotate() error {

	// 1. gzip to back file
	if err := l.compress(); err != nil {
		return err
	}
	// 2. remove old .gz files
	if err := l.removeOldLogs(); err != nil {
		return err
	}
	// 3. create new file
	file, err := os.OpenFile(l.filepath, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0664)
	if err != nil {
		return fmt.Errorf("open new log file error: %v", err)
	}

	l.out = file
	l.file = file

	return nil
}

func (l *Logger) compress() error {

	l.file.Close()

	os.Rename(l.filepath, "./tmp-1234567890.log")
	tmpfile, err := os.OpenFile("./tmp-1234567890.log", os.O_RDONLY, 0644)
	if err != nil {
		return fmt.Errorf("open tmp file error: %v", err)
	}

	defer func() {
		os.Remove("./tmp-1234567890.log")
	}()

	backfile := fmt.Sprintf("%s/%s.gz", filepath.Dir(l.filepath), time.Now().Format("2006-01-02-15-04-05.000"))
	gzfile, err := os.OpenFile(backfile, os.O_CREATE|os.O_WRONLY, 0644)
	defer gzfile.Close()
	if err != nil {
		return fmt.Errorf("create gzip file error: %v", err)
	}

	w := gzip.NewWriter(gzfile)
	if _, err := io.Copy(w, tmpfile); err != nil {
		return fmt.Errorf("copy to gzip file error: %v", err)
	}
	w.Close()

	return nil

}

func (l *Logger) removeOldLogs() error {

	dir := filepath.Dir(l.filepath)
	files, err := ioutil.ReadDir(dir)
	if err != nil {
		return fmt.Errorf("read dir error: %v", err)
	}

	fileinfos := make([]os.FileInfo, 0)

	for _, f := range files {
		if f.IsDir() {
			continue
		}
		filename := f.Name()[:len(f.Name())-len(filepath.Ext(f.Name()))]
		if _, err := time.Parse("2006-01-02-15-04-05.000", filename); err == nil {
			fileinfos = append(fileinfos, f)
		}
	}

	if len(fileinfos) <= l.maxFileNum {
		return nil
	}

	// remove extra files
	for k, f := range fileinfos {
		if k+1 <= len(fileinfos)-l.maxFileNum {
			os.Remove(filepath.Join(dir, f.Name()))
		}
	}

	return nil
}

func (l *Logger) checkIfRotate() bool {

	fileinfo, _ := l.file.Stat()
	if fileinfo.Size() >= l.rotateSize {
		return true
	}
	return false
}

func (l *Logger) SetRotateSize(size int64) *Logger {
	l.rotateSize = size * 1024 * 1024
	return l
}

func (l *Logger) GetRotateSize() int64 {
	return l.rotateSize
}

func (l *Logger) SetMaxFileNum(num int) *Logger {
	l.maxFileNum = num
	return l
}

func (l *Logger) GetMaxFileNum() int {
	return l.maxFileNum
}

// debug
func (l *Logger) Debug(v ...interface{}) {
	if l.level <= DEBUG {
		oldlevel := l.Getlevel()
		l.Setlevel(DEBUG)
		l.Output(2, fmt.Sprintln(v...))
		l.Setlevel(oldlevel)
	}
}

// info
func (l *Logger) Info(v ...interface{}) {
	if l.level <= INFO {
		oldlevel := l.Getlevel()
		l.Setlevel(INFO)
		l.Output(2, fmt.Sprintln(v...))
		l.Setlevel(oldlevel)
	}
}

// warn
func (l *Logger) Warn(v ...interface{}) {
	if l.level <= WARN {
		oldlevel := l.Getlevel()
		l.Setlevel(WARN)
		l.Output(2, fmt.Sprintln(v...))
		l.Setlevel(oldlevel)
	}
}

// error
func (l *Logger) Error(v ...interface{}) {
	if l.level <= ERROR {
		oldlevel := l.Getlevel()
		l.Setlevel(ERROR)
		l.Output(2, fmt.Sprintln(v...))
		l.Setlevel(oldlevel)
	}
}

// std
func Setpath(path string) *Logger {
	return std.Setpath(path)
}
func Getpath() string {
	return std.Getpath()
}
func Setlevel(level Level) *Logger {
	return std.Setlevel(level)
}
func Getlevel() Level {
	return std.Getlevel()
}

func SetRotateSize(size int64) *Logger {
	return std.SetRotateSize(size)
}

func GetRotateSize() int64 {
	return std.GetRotateSize()
}

func SetMaxFileNum(num int) *Logger {
	return std.SetMaxFileNum(num)
}

func GetMaxFileNum() int {
	return std.GetMaxFileNum()
}

// debug
func Debug(v ...interface{}) {
	if std.level <= DEBUG {
		oldlevel := std.Getlevel()
		std.Setlevel(DEBUG)
		std.Output(2, fmt.Sprintln(v...))
		std.Setlevel(oldlevel)
	}
}

// info
func Info(v ...interface{}) {
	if std.level <= INFO {
		oldlevel := std.Getlevel()
		std.Setlevel(INFO)
		std.Output(2, fmt.Sprintln(v...))
		std.Setlevel(oldlevel)
	}
}

// warn
func Warn(v ...interface{}) {
	if std.level <= WARN {
		oldlevel := std.Getlevel()
		std.Setlevel(WARN)
		std.Output(2, fmt.Sprintln(v...))
		std.Setlevel(oldlevel)
	}
}

// error
func Error(v ...interface{}) {
	if std.level <= ERROR {
		oldlevel := std.Getlevel()
		std.Setlevel(ERROR)
		std.Output(2, fmt.Sprintln(v...))
		std.Setlevel(oldlevel)
	}
}

func Rotate() error {
	return std.Rotate()
}
